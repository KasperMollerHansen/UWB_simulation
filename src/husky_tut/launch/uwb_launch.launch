<launch>
  <arg name="world_name" default="worlds/UWB.world"/>

  <include file="$(find gazebo_ros)/launch/UWB.launch">
    <arg name="world_name" value="$(arg world_name)"/> <!-- world_name is wrt GAZEBO_RESOURCE_PATH environment variable -->
    <arg name="paused" value="false"/>
    <arg name="use_sim_time" value="true"/>
    <arg name="gui" value="true"/>
    <arg name="headless" value="false"/>
    <arg name="debug" value="false"/>
  </include>
  
  <include file="$(find husky_gazebo)/launch/spawn_husky.launch">
  </include>
  
  <node pkg="husky_tut" type="uwb_pozyx.py" name="uwb_pozyx"/>
  
  <node pkg="tf2_ros" type="static_transform_publisher" name="map_odom_broadcaster" args="0 0 0 0 0 0 1 map odom" />
  <node pkg="tf2_ros" type="static_transform_publisher" name="map_world_broadcaster" args="0 0 0 0 0 0 1 map world" />
  <node pkg="tf2_ros" type="static_transform_publisher" name="map_uwb_estimate_broadcaster" args="0 0 0 0 0 0 1 map uwb_estimate" />
  <node pkg="tf2_ros" type="static_transform_publisher" name="map_uwb_sqr_broadcaster" args="0 0 0 0 0 0 1 map uwb_sqr" />
  <node pkg="tf2_ros" type="static_transform_publisher" name="map_uwb0_broadcaster" args="0 0 2 0 0 0 1 map uwb_anchor0" />
  <node pkg="tf2_ros" type="static_transform_publisher" name="map_uwb1_broadcaster" args="5 0 0.5 0 0 0 1 map uwb_anchor1" />
  <node pkg="tf2_ros" type="static_transform_publisher" name="map_uwb2_broadcaster" args="10 0 2 0 0 0 1 map uwb_anchor2" />
  <node pkg="tf2_ros" type="static_transform_publisher" name="map_uwb3_broadcaster" args="10 10 2 0 0 0 1 map uwb_anchor3" />
  <node pkg="tf2_ros" type="static_transform_publisher" name="map_uwb4_broadcaster" args="5 10 0.5 0 0 0 1 map uwb_anchor4" />
  <node pkg="tf2_ros" type="static_transform_publisher" name="map_uwb5_broadcaster" args="0 10 2 0 0 0 1 map uwb_anchor5" />
  <node pkg="ieuagv_localization" type="kalman_filter_localization.py" name="kalman_filter_localization"/>
  <node pkg="ieuagv_localization" type="sqrrange_leastsqr_localization.py" name="sqrrange_leastsqr_localization"/>
  <node pkg="husky_tut" type="error_estimation.py" name="error_estimation"/>
  <node pkg="rviz" type="rviz" name="rviz" args="-d $(find husky_tut)/rviz/uwb.rviz" />
  <node pkg="rqt_robot_steering" type="rqt_robot_steering" name="rqt_robot_steering"/>
  <node pkg="rqt_plot" type="rqt_plot" name="rqt_plot" args = "/husky_error"/>
  
</launch>
